package com.ericsson.fmt.forecasting.utils;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.ericsson.fmt.commons.Constants;
import com.ericsson.fmt.commons.PropertiesReader.ForecastEngineConfig;
import com.ericsson.fmt.commons.Utilities;
import com.ericsson.fmt.commons.exceptions.FMTMetaParseException;
import com.ericsson.fmt.forecasting.dto.CPHFunction;
import com.ericsson.fmt.forecasting.dto.CPHFunctionSet;
import com.ericsson.fmt.forecasting.dto.RegressionParam;

public class XmlConfigUtil
{
	/**
	 * Formats a xml string
	 * @param input
	 * @param indent
	 * @return
	 */
	public static String prettyFormatXml(String input, int indent)
	{
		try
		{
			Source xmlInput = new StreamSource(new StringReader(input));
			StringWriter stringWriter = new StringWriter();
			StreamResult xmlOutput = new StreamResult(stringWriter);
			TransformerFactory transformerFactory = TransformerFactory
					.newInstance();
			transformerFactory.setAttribute("indent-number", indent);
			Transformer transformer = transformerFactory.newTransformer();
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			transformer.transform(xmlInput, xmlOutput);
			
			return xmlOutput.getWriter().toString();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		return input;
	}

	public static String tempPathForSite(String siteId)
	{
		return Constants.OBJECT_FILE_LOC + File.separator + siteId + "."
				+ Constants.OBJECT_FILE_EXT;
	}

	
	private static final Map<String, CPHFunctionSet> regressionCfg = new HashMap<>();
	
	static
	{
		try
		{
			buildRegressionFunctionSet();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public static CPHFunctionSet getRegressionSet(String setId)
	{
		return regressionCfg.get(setId);
	}
	
	private static void buildRegressionFunctionSet() throws Exception
	{
		try
		{
			String configXml = ForecastEngineConfig.getCphRegressionXml();
			String configXsd = ForecastEngineConfig.getCphRegressionXsd();
			
			if (Utilities.validateXml(configXml, configXsd))
			{
				DocumentBuilderFactory builder = DocumentBuilderFactory.newInstance();
				builder.setSchema(Utilities.getSchema(configXsd));//add this to set default values
				
				Document dom = builder.newDocumentBuilder().parse(new File(configXml));

				Element root = dom.getDocumentElement();
				NodeList sets = root.getElementsByTagName("set");
				if (sets != null && sets.getLength() > 0)
				{
					
					for (int setCnt = 0; setCnt < sets.getLength(); setCnt++)
					{

						Element set = (Element) sets.item(setCnt);
						String setId = set.getAttribute("id");
						CPHFunctionSet cphFunctionSet = new CPHFunctionSet(
								setId);

						NodeList functions = set
								.getElementsByTagName("function");
						if (functions != null && functions.getLength() > 0)
						{
							for (int functionCnt = 0; functionCnt < functions
									.getLength(); functionCnt++)
							{

								Element function = (Element) functions
										.item(functionCnt);
								String functionId = function.getAttribute("id");
								CPHFunction cphFunction = new CPHFunction(
										functionId);

								NodeList sqlrefs = function
										.getElementsByTagName("sqlref");
								if (sqlrefs != null && sqlrefs.getLength() == 1)
								{

									Element sql = (Element) sqlrefs.item(0);
									cphFunction.setSqlRef(sql
											.getAttribute("name"));
									if (sql.getElementsByTagName("query") != null
											&& sql.getElementsByTagName("query")
													.getLength() == 1)
									{
										Element query = (Element) sql
												.getElementsByTagName("query")
												.item(0);
										if (query.getFirstChild() != null)
										{
											cphFunction.setSqlQuery(query
													.getFirstChild()
													.getNodeValue());
										}
									}
									NodeList binds = sql
											.getElementsByTagName("bind");
									if (binds != null)
									{
										List<String> bindings = new ArrayList<>(
												binds.getLength());
										for (int i = 0; i < binds.getLength(); i++)
										{
											Element bind = (Element) binds
													.item(i);
											int idx = Integer.parseInt(bind
													.getAttribute("index"));
											String prop = bind
													.getAttribute("prop");
											bindings.add(idx, prop);
										}

										cphFunction.setBindParams(bindings);
									}
								}

								NodeList lhsNodes = function
										.getElementsByTagName("lhs");
								if (lhsNodes != null
										&& lhsNodes.getLength() == 1)
								{
									Element lhsNode = (Element) lhsNodes
											.item(0);
									NodeList paramNodes = lhsNode
											.getElementsByTagName("param");
									for (int paramCnt = 0; paramCnt < paramNodes
											.getLength(); paramCnt++)
									{
										Element param = (Element) paramNodes
												.item(paramCnt);
										RegressionParam regressionParam = new RegressionParam();
										regressionParam
												.setParamName(Utilities.isNullOrBlank(param
														.getAttribute("name")) ? null
														: param.getAttribute("name"));
										regressionParam
												.setCategory(Boolean.parseBoolean(param
														.getAttribute("category")));
										regressionParam
												.setDateFormat(Utilities.isNullOrBlank(param
														.getAttribute("format")) ? null
														: param.getAttribute("format"));

										regressionParam
												.setParticipant(Boolean
														.parseBoolean(param
																.getAttribute("participant")));
										
										cphFunction.addLhs(regressionParam);
									}
								}

								NodeList rhsNodes = function
										.getElementsByTagName("rhs");
								if (rhsNodes != null
										&& rhsNodes.getLength() == 1)
								{
									Element rhsNode = (Element) rhsNodes
											.item(0);
									NodeList paramNodes = rhsNode
											.getElementsByTagName("param");
									if (paramNodes != null
											&& paramNodes.getLength() == 1)
									{

										Element param = (Element) paramNodes
												.item(0);
										RegressionParam regressionParam = new RegressionParam();
										regressionParam
												.setParamName(Utilities.isNullOrBlank(param
														.getAttribute("name")) ? null
														: param.getAttribute("name"));
										regressionParam
												.setCategory(Boolean.parseBoolean(param
														.getAttribute("category")));
										regressionParam
												.setDateFormat(Utilities.isNullOrBlank(param
														.getAttribute("format")) ? null
														: param.getAttribute("format"));

										cphFunction.setRhs(regressionParam);
									}
								}

								cphFunctionSet.addData(cphFunction);
							}
						}

						regressionCfg.put(setId, cphFunctionSet);
					}
				}

			}

		}
		catch (ParserConfigurationException | SAXException | IOException e)
		{
			e.printStackTrace();
			throw e;
		}
		
	}
	
	/**
	 * @deprecated
	 * @param configXml
	 * @param configXsd
	 * @return
	 * @throws FMTMetaParseException
	 */
	public static Map<String, CPHFunctionSet> getRegressionFunctionSetMeta(
			String configXml, String configXsd) throws FMTMetaParseException
	{
		Map<String, CPHFunctionSet> cphFunctionSetList = null;

		try
		{
			if (Utilities.validateXml(configXml, configXsd))
			{
				Document dom = DocumentBuilderFactory.newInstance()
						.newDocumentBuilder().parse(new File(configXml));

				Element root = dom.getDocumentElement();
				NodeList sets = root.getElementsByTagName("set");
				if (sets != null && sets.getLength() > 0)
				{
					cphFunctionSetList = new HashMap<>();

					for (int setCnt = 0; setCnt < sets.getLength(); setCnt++)
					{

						Element set = (Element) sets.item(setCnt);
						String setId = set.getAttribute("id");
						CPHFunctionSet cphFunctionSet = new CPHFunctionSet(
								setId);

						NodeList functions = set
								.getElementsByTagName("function");
						if (functions != null && functions.getLength() > 0)
						{
							for (int functionCnt = 0; functionCnt < functions
									.getLength(); functionCnt++)
							{

								Element function = (Element) functions
										.item(functionCnt);
								String functionId = function.getAttribute("id");
								CPHFunction cphFunction = new CPHFunction(
										functionId);

								NodeList sqlrefs = function
										.getElementsByTagName("sqlref");
								if (sqlrefs != null && sqlrefs.getLength() == 1)
								{

									Element sql = (Element) sqlrefs.item(0);
									cphFunction.setSqlRef(sql
											.getAttribute("name"));
									if (sql.getElementsByTagName("query") != null
											&& sql.getElementsByTagName("query")
													.getLength() == 1)
									{
										Element query = (Element) sql
												.getElementsByTagName("query")
												.item(0);
										if (query.getFirstChild() != null)
										{
											cphFunction.setSqlQuery(query
													.getFirstChild()
													.getNodeValue());
										}
									}
									NodeList binds = sql
											.getElementsByTagName("bind");
									if (binds != null)
									{
										List<String> bindings = new ArrayList<>(
												binds.getLength());
										for (int i = 0; i < binds.getLength(); i++)
										{
											Element bind = (Element) binds
													.item(i);
											int idx = Integer.parseInt(bind
													.getAttribute("index"));
											String prop = bind
													.getAttribute("prop");
											bindings.add(idx, prop);
										}

										cphFunction.setBindParams(bindings);
									}
								}

								NodeList lhsNodes = function
										.getElementsByTagName("lhs");
								if (lhsNodes != null
										&& lhsNodes.getLength() == 1)
								{
									Element lhsNode = (Element) lhsNodes
											.item(0);
									NodeList paramNodes = lhsNode
											.getElementsByTagName("param");
									for (int paramCnt = 0; paramCnt < paramNodes
											.getLength(); paramCnt++)
									{
										Element param = (Element) paramNodes
												.item(paramCnt);
										RegressionParam regressionParam = new RegressionParam();
										regressionParam
												.setParamName(Utilities.isNullOrBlank(param
														.getAttribute("name")) ? null
														: param.getAttribute("name"));
										regressionParam
												.setCategory("true".equalsIgnoreCase(param
														.getAttribute("category")));
										regressionParam
												.setDateFormat(Utilities.isNullOrBlank(param
														.getAttribute("format")) ? null
														: param.getAttribute("format"));

										regressionParam
												.setParticipant(Utilities.isNullOrBlank(param
														.getAttribute("ignore")) ? true
														: !Boolean
																.parseBoolean(param
																		.getAttribute("ignore")));

										cphFunction.addLhs(regressionParam);
									}
								}

								NodeList rhsNodes = function
										.getElementsByTagName("rhs");
								if (rhsNodes != null
										&& rhsNodes.getLength() == 1)
								{
									Element rhsNode = (Element) rhsNodes
											.item(0);
									NodeList paramNodes = rhsNode
											.getElementsByTagName("param");
									if (paramNodes != null
											&& paramNodes.getLength() == 1)
									{

										Element param = (Element) paramNodes
												.item(0);
										RegressionParam regressionParam = new RegressionParam();
										regressionParam
												.setParamName(Utilities.isNullOrBlank(param
														.getAttribute("name")) ? null
														: param.getAttribute("name"));
										regressionParam
												.setCategory(Boolean.parseBoolean(param
														.getAttribute("category")));
										regressionParam
												.setDateFormat(Utilities.isNullOrBlank(param
														.getAttribute("format")) ? null
														: param.getAttribute("format"));

										cphFunction.setRhs(regressionParam);
									}
								}

								cphFunctionSet.addData(cphFunction);
							}
						}

						cphFunctionSetList.put(setId, cphFunctionSet);
					}
				}

			}

		}
		catch (ParserConfigurationException | SAXException | IOException e)
		{
			throw new FMTMetaParseException(e);
		}
		return cphFunctionSetList;
	}

	/**
	 * Returns a physical unpooled connection
	 * 
	 * @return
	 */
	public static Connection getConnection()
	{
		return null;

	}

	public static void main(String[] args)
	{

		double d = 12.3;
		System.out.println(d == Double.NaN);
		/*String configXml = "./config/cph-regression.xml";
		String configXsd = "./config/cph-regression.xsd";
		//List<CPHFunctionSet> cphFunctionSetList = null;

		try
		{
			getRegressionFunctionSetMeta(configXml, configXsd);
		}
		catch (FMTMetaParseException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/

		/*if (cphFunctionSetList != null)
		{
			for (CPHFunctionSet set : cphFunctionSetList)
			{
				System.out.println(set);
			}
		}*/

	}
}
